// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tracklists.sql

package datastore

import (
	"context"
	"time"
)

const addTracklist = `-- name: AddTracklist :one
INSERT INTO "tracklists" (
  "id",
  "name",
  "url",
  "artwork",
  "date",
  "created",
  "updated"
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, name, date, artwork, url, created, updated
`

type AddTracklistParams struct {
	ID      string
	Name    string
	URL     string
	Artwork string
	Date    time.Time
	Created time.Time
	Updated time.Time
}

func (q *Queries) AddTracklist(ctx context.Context, arg AddTracklistParams) (*Tracklist, error) {
	row := q.db.QueryRow(ctx, addTracklist,
		arg.ID,
		arg.Name,
		arg.URL,
		arg.Artwork,
		arg.Date,
		arg.Created,
		arg.Updated,
	)
	var i Tracklist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Date,
		&i.Artwork,
		&i.URL,
		&i.Created,
		&i.Updated,
	)
	return &i, err
}

const countTracklists = `-- name: CountTracklists :one
SELECT count("id") FROM "tracklists"
`

func (q *Queries) CountTracklists(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countTracklists)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countTracklistsByTrack = `-- name: CountTracklistsByTrack :one
SELECT
  count("tracklists"."id")
FROM (
  SELECT "tracklists"."id"
  FROM "tracklists"
  JOIN "tracklist_tracks" ON "tracklist_tracks"."tracklist_id" = "tracklists"."id"
  WHERE "tracklist_tracks"."track_id" = $1
  GROUP BY "tracklists"."id"
  ORDER BY "tracklists"."date" DESC
) AS "tracklists"
`

func (q *Queries) CountTracklistsByTrack(ctx context.Context, trackID string) (int64, error) {
	row := q.db.QueryRow(ctx, countTracklistsByTrack, trackID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getTracklistWithTracks = `-- name: GetTracklistWithTracks :many
SELECT
  tracklists.id, tracklists.name, tracklists.date, tracklists.artwork, tracklists.url, tracklists.created, tracklists.updated,
  tracks.id, tracks.artist, tracks.name, tracks.genre, tracks.bpm, tracks.key, tracks.created, tracks.updated, tracks.fts_name_and_artist
FROM "tracklists"
JOIN "tracklist_tracks" ON "tracklist_tracks"."tracklist_id" = "tracklists"."id"
JOIN "tracks" ON "tracks"."id" = "tracklist_tracks"."track_id"
WHERE "tracklists"."id" = $1
ORDER BY "tracklist_tracks"."track_number" ASC
`

type GetTracklistWithTracksRow struct {
	Tracklist Tracklist
	Track     Track
}

func (q *Queries) GetTracklistWithTracks(ctx context.Context, id string) ([]*GetTracklistWithTracksRow, error) {
	rows, err := q.db.Query(ctx, getTracklistWithTracks, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetTracklistWithTracksRow{}
	for rows.Next() {
		var i GetTracklistWithTracksRow
		if err := rows.Scan(
			&i.Tracklist.ID,
			&i.Tracklist.Name,
			&i.Tracklist.Date,
			&i.Tracklist.Artwork,
			&i.Tracklist.URL,
			&i.Tracklist.Created,
			&i.Tracklist.Updated,
			&i.Track.ID,
			&i.Track.Artist,
			&i.Track.Name,
			&i.Track.Genre,
			&i.Track.BPM,
			&i.Track.Key,
			&i.Track.Created,
			&i.Track.Updated,
			&i.Track.FtsNameAndArtist,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTracklists = `-- name: GetTracklists :many
SELECT
  tracklists.id, tracklists.name, tracklists.date, tracklists.artwork, tracklists.url, tracklists.created, tracklists.updated,
  count("tracklists"."id") as "track_count"
FROM "tracklists"
JOIN "tracklist_tracks" ON "tracklist_tracks"."tracklist_id" = "tracklists"."id"
GROUP BY "tracklists"."id"
ORDER BY "tracklists"."date" DESC
OFFSET $1
LIMIT $2
`

type GetTracklistsParams struct {
	Offset int32
	Limit  int32
}

type GetTracklistsRow struct {
	Tracklist  Tracklist
	TrackCount int64
}

func (q *Queries) GetTracklists(ctx context.Context, arg GetTracklistsParams) ([]*GetTracklistsRow, error) {
	rows, err := q.db.Query(ctx, getTracklists, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetTracklistsRow{}
	for rows.Next() {
		var i GetTracklistsRow
		if err := rows.Scan(
			&i.Tracklist.ID,
			&i.Tracklist.Name,
			&i.Tracklist.Date,
			&i.Tracklist.Artwork,
			&i.Tracklist.URL,
			&i.Tracklist.Created,
			&i.Tracklist.Updated,
			&i.TrackCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTracklistsByTrack = `-- name: GetTracklistsByTrack :many
SELECT
  tracklists.id, tracklists.name, tracklists.date, tracklists.artwork, tracklists.url, tracklists.created, tracklists.updated,
  (
    SELECT count("id")
    FROM "tracklist_tracks"
    WHERE "tracklist_tracks"."tracklist_id" = "tracklists"."id"
  ) as "track_count"
FROM "tracklists"
JOIN "tracklist_tracks" ON "tracklist_tracks"."tracklist_id" = "tracklists"."id"
WHERE "tracklist_tracks"."track_id" = $1
ORDER BY "tracklists"."date" DESC
OFFSET $2
LIMIT $3
`

type GetTracklistsByTrackParams struct {
	TrackID string
	Offset  int32
	Limit   int32
}

type GetTracklistsByTrackRow struct {
	Tracklist  Tracklist
	TrackCount int64
}

func (q *Queries) GetTracklistsByTrack(ctx context.Context, arg GetTracklistsByTrackParams) ([]*GetTracklistsByTrackRow, error) {
	rows, err := q.db.Query(ctx, getTracklistsByTrack, arg.TrackID, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetTracklistsByTrackRow{}
	for rows.Next() {
		var i GetTracklistsByTrackRow
		if err := rows.Scan(
			&i.Tracklist.ID,
			&i.Tracklist.Name,
			&i.Tracklist.Date,
			&i.Tracklist.Artwork,
			&i.Tracklist.URL,
			&i.Tracklist.Created,
			&i.Tracklist.Updated,
			&i.TrackCount,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTracklist = `-- name: UpdateTracklist :one
UPDATE "tracklists"
SET "name" = $2, "url" = $3, "date" = $4, "updated" = now()
WHERE "id" = $1
RETURNING id, name, date, artwork, url, created, updated
`

type UpdateTracklistParams struct {
	ID   string
	Name string
	URL  string
	Date time.Time
}

func (q *Queries) UpdateTracklist(ctx context.Context, arg UpdateTracklistParams) (*Tracklist, error) {
	row := q.db.QueryRow(ctx, updateTracklist,
		arg.ID,
		arg.Name,
		arg.URL,
		arg.Date,
	)
	var i Tracklist
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Date,
		&i.Artwork,
		&i.URL,
		&i.Created,
		&i.Updated,
	)
	return &i, err
}
